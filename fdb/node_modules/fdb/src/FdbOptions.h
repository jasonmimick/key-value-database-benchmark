/*
 * FoundationDB Node.js API
 * Copyright (c) 2012 FoundationDB, LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef FDB_NODE_FDB_OPTIONS_H
#define FDB_NODE_FDB_OPTIONS_H

#define ADD_FUNCTION(name, value, objectTemplate, function, isSetter) \
	objectTemplate->PrototypeTemplate()->Set(v8::String::NewSymbol(ToJavaScriptName(name, isSetter).c_str()), v8::FunctionTemplate::New(function, v8::Integer::New(value))->GetFunction()); 

#define ADD_ENUM(name, value, optionTemplate) \
	optionTemplate->PrototypeTemplate()->Set(v8::String::NewSymbol(ToJavaScriptName(name, false).c_str()), v8::Integer::New(value));

// Options
#define ADD_NET_OPTION(name, value, type) ADD_FUNCTION(name, value, networkOptionsTemplate, SetNetworkOption, true); networkParameterTypes[value] = type
#define ADD_CLUSTER_OPTION(name, value, type) ADD_FUNCTION(name, value, clusterOptionsTemplate, SetClusterOption, true); clusterParameterTypes[value] = type
#define ADD_DB_OPTION(name, value, type) ADD_FUNCTION(name, value, databaseOptionsTemplate, SetDatabaseOption, true); databaseParameterTypes[value] = type
#define ADD_TR_OPTION(name, value, type) ADD_FUNCTION(name, value, transactionOptionsTemplate, SetTransactionOption, true); transactionParameterTypes[value] = type

// Streaming modes
#define ADD_STREAMING_MODE(name, value, ignoredParam) ADD_ENUM(name, value, streamingModeTemplate);

// Atomic operations
#define ADD_MUTATION_TYPE(name, value, ignoredParam) ADD_FUNCTION(name, value, atomicOperationsTemplate, CallAtomicOperation, false);

//Conflict range type enum is not exposed to JS code
#define ADD_CONFLICT_RANGE_TYPE(name, value, ignoredParam) 

#include "Version.h"

#include <foundationdb/fdb_c.h>
#include <node.h>
#include <string>
#include <map>

class FdbOptions : node::ObjectWrap {
	public:
		static void Init();

		static v8::Handle<v8::Value> CreateNetworkOptions();
		static v8::Handle<v8::Value> CreateClusterOptions(v8::Handle<v8::Value> cluster);
		static v8::Handle<v8::Value> CreateDatabaseOptions(v8::Handle<v8::Value> database);
		static v8::Handle<v8::Value> CreateTransactionOptions(v8::Handle<v8::Value> transaction);

		static v8::Handle<v8::Value> CreateStreamingModes();
		static v8::Handle<v8::Value> CreateAtomicOperations();

		enum ParameterType {
			None,
			Int,
			String,
			Bytes
		};

	private:
		static v8::Handle<v8::Value> New(const v8::Arguments &args);
		static v8::Handle<v8::Value> NewInstance(v8::Persistent<v8::FunctionTemplate> optionsTemplate, v8::Handle<v8::Value> source);

		FdbOptions();

		static void InitOptionsTemplate(v8::Persistent<v8::FunctionTemplate> &tpl, const char *className);
		static void InitOptions();

		static void InitAtomicsTemplate(v8::Persistent<v8::FunctionTemplate> &tpl, const char *className);

		static void WeakCallback(v8::Persistent<v8::Value> value, void *data);

		static v8::Handle<v8::Value> SetNetworkOption(const v8::Arguments &args);
		static v8::Handle<v8::Value> SetClusterOption(const v8::Arguments &args);
		static v8::Handle<v8::Value> SetDatabaseOption(const v8::Arguments &args);
		static v8::Handle<v8::Value> SetTransactionOption(const v8::Arguments &args);

		static v8::Handle<v8::Value> CallAtomicOperation(const v8::Arguments &args);

		static v8::Persistent<v8::FunctionTemplate> networkOptionsTemplate;
		static v8::Persistent<v8::FunctionTemplate> clusterOptionsTemplate;
		static v8::Persistent<v8::FunctionTemplate> databaseOptionsTemplate;
		static v8::Persistent<v8::FunctionTemplate> transactionOptionsTemplate;

		static v8::Persistent<v8::FunctionTemplate> streamingModeTemplate;
		static v8::Persistent<v8::FunctionTemplate> atomicOperationsTemplate;

		static std::string ToJavaScriptName(std::string optionName, bool isSetter);

		v8::Persistent<v8::Value> source;

		static std::map<int, ParameterType> networkParameterTypes;
		static std::map<int, ParameterType> clusterParameterTypes;
		static std::map<int, ParameterType> databaseParameterTypes;
		static std::map<int, ParameterType> transactionParameterTypes;
};

#endif
